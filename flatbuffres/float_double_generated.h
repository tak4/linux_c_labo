// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLOATDOUBLE_SAMPLE_H_
#define FLATBUFFERS_GENERATED_FLOATDOUBLE_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace Sample {

struct TopTable;
struct TopTableBuilder;

struct TopTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TopTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_F_VAL = 4,
    VT_D_VAL = 6
  };
  float f_val() const {
    return GetField<float>(VT_F_VAL, 0.0f);
  }
  double d_val() const {
    return GetField<double>(VT_D_VAL, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_F_VAL, sizeof(float)) &&
           VerifyField<double>(verifier, VT_D_VAL, sizeof(double)) &&
           verifier.EndTable();
  }
};

struct TopTableBuilder {
  typedef TopTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_f_val(float f_val) {
    fbb_.AddElement<float>(TopTable::VT_F_VAL, f_val, 0.0f);
  }
  void add_d_val(double d_val) {
    fbb_.AddElement<double>(TopTable::VT_D_VAL, d_val, 0.0);
  }
  explicit TopTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TopTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TopTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<TopTable> CreateTopTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    float f_val = 0.0f,
    double d_val = 0.0) {
  TopTableBuilder builder_(_fbb);
  builder_.add_d_val(d_val);
  builder_.add_f_val(f_val);
  return builder_.Finish();
}

inline const Sample::TopTable *GetTopTable(const void *buf) {
  return flatbuffers::GetRoot<Sample::TopTable>(buf);
}

inline const Sample::TopTable *GetSizePrefixedTopTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Sample::TopTable>(buf);
}

inline bool VerifyTopTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sample::TopTable>(nullptr);
}

inline bool VerifySizePrefixedTopTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sample::TopTable>(nullptr);
}

inline void FinishTopTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sample::TopTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTopTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sample::TopTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Sample

#endif  // FLATBUFFERS_GENERATED_FLOATDOUBLE_SAMPLE_H_
